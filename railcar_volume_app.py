import streamlit as st
import numpy as np
from scipy.interpolate import interp1d

# Page setup
st.set_page_config(page_title="Railcar Volume Calculator", layout="centered")
st.title("ðŸš‚ Railcar Volume Calculator")
st.markdown("Select a tank profile and enter either a fill height (in cm) or a target volume to compute the result in gallons, liters, or height.")

# Full continuous data from your table (inches, gallons), every 0.25 inches, no gaps
data = [
    (0.25, 23), (0.5, 47), (0.75, 72), (1.0, 98), (1.25, 125), (1.5, 153), (1.75, 182), (2.0, 212),
    (2.25, 242), (2.5, 274), (2.75, 306), (3.0, 339), (3.25, 373), (3.5, 408), (3.75, 443), (4.0, 479),
    (4.25, 516), (4.5, 553), (4.75, 591), (5.0, 629), (5.25, 669), (5.5, 709), (5.75, 749), (6.0, 790),
    (6.25, 832), (6.5, 874), (6.75, 916), (7.0, 960), (7.25, 1004), (7.5, 1048), (7.75, 1093), (8.0, 1138),
    (8.25, 1184), (8.5, 1230), (8.75, 1277), (9.0, 1325), (9.25, 1373), (9.5, 1421), (9.75, 1470), (10.0, 1519),
    (10.25, 1568), (10.5, 1619), (10.75, 1669), (11.0, 1720), (11.25, 1772), (11.5, 1823), (11.75, 1876), (12.0, 1928),
    (12.25, 1981), (12.5, 2035), (12.75, 2089), (13.0, 2143), (13.25, 2198), (13.5, 2253), (13.75, 2308), (14.0, 2364),
    (14.25, 2420), (14.5, 2476), (14.75, 2533), (15.0, 2591), (15.25, 2648), (15.5, 2706), (15.75, 2764), (16.0, 2823),
    (16.25, 2882), (16.5, 2941), (16.75, 3001), (17.0, 3061), (17.25, 3121), (17.5, 3181), (17.75, 3242), (18.0, 3303),
    (18.25, 3365), (18.5, 3427), (18.75, 3489), (19.0, 3551), (19.25, 3614), (19.5, 3677), (19.75, 3740), (20.0, 3804),
    (20.25, 3867), (20.5, 3931), (20.75, 3996), (21.0, 4060), (21.25, 4125), (21.5, 4191), (21.75, 4256), (22.0, 4322),
    (22.25, 4388), (22.5, 4454), (22.75, 4520), (23.0, 4587), (23.25, 4654), (23.5, 4721), (23.75, 4789), (24.0, 4856),
    (24.25, 4924), (24.5, 4992), (24.75, 5061), (25.0, 5129), (25.25, 5198), (25.5, 5267), (25.75, 5337), (26.0, 5406),
    (26.25, 5476), (26.5, 5546), (26.75, 5616), (27.0, 5686), (27.25, 5757), (27.5, 5828), (27.75, 5899), (28.0, 5970),
    (28.25, 6041), (28.5, 6113), (28.75, 6185), (29.0, 6256), (29.25, 6329), (29.5, 6401), (29.75, 6473), (30.0, 6546),
    (30.25, 6619), (30.5, 6692), (30.75, 6765), (31.0, 6839), (31.25, 6912), (31.5, 6986), (31.75, 7060), (32.0, 7134),
    (32.25, 7208), (32.5, 7283), (32.75, 7357), (33.0, 7432), (33.25, 7507), (33.5, 7582), (33.75, 7657), (34.0, 7732),
    (34.25, 7808), (34.5, 7883), (34.75, 7959), (35.0, 8035), (35.25, 8111), (35.5, 8187), (35.75, 8264), (36.0, 8340),
    (36.25, 8417), (36.5, 8493), (36.75, 8570), (37.0, 8647), (37.25, 8724), (37.5, 8802), (37.75, 8879), (38.0, 8956),
    (38.25, 9034), (38.5, 9112), (38.75, 9189), (39.0, 9267), (39.25, 9345), (39.5, 9423), (39.75, 9502), (40.0, 9580),
    (40.25, 9658), (40.5, 9737), (40.75, 9816), (41.0, 9894), (41.25, 9973), (41.5, 10052), (41.75, 10131), (42.0, 10210),
    (42.25, 10290), (42.5, 10369), (42.75, 10448), (43.0, 10528), (43.25, 10607), (43.5, 10687), (43.75, 10767), (44.0, 10847),
    (44.25, 10926), (44.5, 11006), (44.75, 11086), (45.0, 11166), (45.25, 11247), (45.5, 11327), (45.75, 11407), (46.0, 11487),
    (46.25, 11568), (46.5, 11648), (46.75, 11729), (47.0, 11809), (47.25, 11890), (47.5, 11971), (47.75, 12051), (48.0, 12132),
    (48.25, 12213), (48.5, 12294), (48.75, 12375), (49.0, 12456), (49.25, 12537), (49.5, 12618), (49.75, 12699), (50.0, 12780),
    (50.25, 12861), (50.5, 12943), (50.75, 13024), (51.0, 13105), (51.25, 13186), (51.5, 13268), (51.75, 13349), (52.0, 13430),
    (52.25, 13512), (52.5, 13593), (52.75, 13675), (53.0, 13756), (53.25, 13837), (53.5, 13919), (53.75, 14000), (54.0, 14082),
    (54.25, 14163), (54.5, 14245), (54.75, 14326), (55.0, 14408), (55.25, 14489), (55.5, 14571), (55.75, 14653), (56.0, 14734),
    (56.25, 14816), (56.5, 14897), (56.75, 14979), (57.0, 15060), (57.25, 15142), (57.5, 15223), (57.75, 15305), (58.0, 15386),
    (58.25, 15468), (58.5, 15549), (58.75, 15631), (59.0, 15712), (59.25, 15794), (59.5, 15875), (59.75, 15956), (60.0, 16037),
    (60.25, 16119), (60.5, 16200), (60.75, 16282), (61.0, 16363), (61.25, 16445), (61.5, 16526), (61.75, 16607), (62.0, 16686),
    (62.25, 16767), (62.5, 16848), (62.75, 16929), (63.0, 17010), (63.25, 17091), (63.5, 17172), (63.75, 17252), (64.0, 17333),
    (64.25, 17413), (64.5, 17494), (64.75, 17574), (65.0, 17655), (65.25, 17735), (65.5, 17816), (65.75, 17896), (66.0, 17976),
    (66.25, 18056), (66.5, 18137), (66.75, 18217), (67.0, 18296), (67.25, 18375), (67.5, 18455), (67.75, 18534), (68.0, 18614),
    (68.25, 18693), (68.5, 18773), (68.75, 18852), (69.0, 18932), (69.25, 19011), (69.5, 19090), (69.75, 19169), (70.0, 19248),
    (70.25, 19326), (70.5, 19405), (70.75, 19484), (71.0, 19562), (71.25, 19640), (71.5, 19719), (71.75, 19797), (72.0, 19875),
    (72.25, 19953), (72.5, 20030), (72.75, 20108), (73.0, 20186), (73.25, 20263), (73.5, 20341), (73.75, 20418), (74.0, 20495),
    (74.25, 20572), (74.5, 20649), (74.75, 20725), (75.0, 20802), (75.25, 20878), (75.5, 20955), (75.75, 21031), (76.0, 21107),
    (76.25, 21183), (76.5, 21259), (76.75, 21334), (77.0, 21410), (77.25, 21485), (77.5, 21560), (77.75, 21635), (78.0, 21710),
    (78.25, 21785), (78.5, 21859), (78.75, 21934), (79.0, 22008), (79.25, 22082), (79.5, 22156), (79.75, 22230), (80.0, 22303),
    (80.25, 22377), (80.5, 22450), (80.75, 22523), (81.0, 22596), (81.25, 22669), (81.5, 22741), (81.75, 22813), (82.0, 22886),
    (82.25, 22957), (82.5, 23029), (82.75, 23101), (83.0, 23172), (83.25, 23243), (83.5, 23314), (83.75, 23385), (84.0, 23456),
    (84.25, 23526), (84.5, 23596), (84.75, 23666), (85.0, 23736), (85.25, 23806), (85.5, 23876), (85.75, 23945), (86.0, 24015),
    (86.25, 24084), (86.5, 24153), (86.75, 24222), (87.0, 24288), (87.25, 24355), (87.5, 24422), (87.75, 24488), (88.0, 24555),
    (88.25, 24621), (88.5, 24688), (88.75, 24754), (89.0, 24820), (89.25, 24886), (89.5, 24952), (89.75, 25017), (90.0, 25082),
    (90.25, 25147), (90.5, 25212), (90.75, 25276), (91.0, 25341), (91.25, 25405), (91.5, 25469), (91.75, 25533), (92.0, 25597),
    (92.25, 25661), (92.5, 25725), (92.75, 25788), (93.0, 25852), (93.25, 25915), (93.5, 25978), (93.75, 26041), (94.0, 26104),
    (94.25, 26167), (94.5, 26230), (94.75, 26293), (95.0, 26320), (95.25, 26383), (95.5, 26446), (95.75, 26509), (96.0, 26571),
    (96.25, 26634), (96.5, 26696), (96.75, 26758), (97.0, 26819), (97.25, 26880), (97.5, 26941), (97.75, 27002), (98.0, 27062),
    (98.25, 27123), (98.5, 27183), (98.75, 27243), (99.0, 27303), (99.25, 27363), (99.5, 27424), (99.75, 27484), (100.0, 27544),
    (100.25, 27604), (100.5, 27664), (100.75, 27723), (101.0, 27782), (101.25, 27841), (101.5, 27900), (101.75, 27959), (102.0, 28018),
    (102.25, 28076), (102.5, 28135), (102.75, 28193), (103.0, 28251), (103.25, 28309), (103.5, 28367), (103.75, 28425), (104.0, 28482),
    (104.25, 28540), (104.5, 28597), (104.75, 28654), (105.0, 28711), (105.25, 28768), (105.5, 28825), (105.75, 28881), (106.0, 28938),
    (106.25, 28994), (106.5, 29050), (106.75, 29106), (107.0, 29162), (107.25, 29218), (107.5, 29273), (107.75, 29329), (108.0, 29384),
    (108.25, 29439), (108.5, 29494), (108.75, 29549), (109.0, 29604), (109.25, 29659), (109.5, 29714), (109.75, 29768), (110.0, 29822),
    (110.25, 29876), (110.5, 29930), (110.75, 29984), (111.0, 30038), (111.25, 30092), (111.5, 30145), (111.75, 30199), (112.0, 30252),
    (112.25, 30306), (112.5, 30359), (112.75, 30412), (113.0, 30465), (113.25, 30518), (113.5, 30571), (113.75, 30623), (114.0, 30676),
    (114.25, 30728), (114.5, 30781), (114.75, 30833), (115.0, 30885), (115.25, 30937), (115.5, 30989), (115.75, 31041), (116.0, 31092),
    (116.25, 31144), (116.5, 31196)
]

height_in, volume_gal = zip(*data)

# Debug: Length check
if len(height_in) != len(volume_gal):
    st.error("Error: Data lengths for height and volume do not match!")
else:
    # Create interpolation functions
    volume_interp = interp1d(height_in, volume_gal, kind='linear', fill_value="extrapolate")
    height_interp = interp1d(volume_gal, height_in, kind='linear', fill_value="extrapolate")

    # User input mode selection
    st.header("ðŸ“¥ Input Mode")
    mode = st.radio("Select input type:", ["Height (cm)", "Volume (gallons)", "Volume (liters)"])

    max_height_cm = height_in[-1] * 2.54  # convert max height from inches to cm

    if mode == "Height (cm)":
        fill_height_cm = st.number_input("Enter fill height (cm):", min_value=0.0, max_value=max_height_cm, step=0.01)
        fill_height_in = fill_height_cm / 2.54
        volume = float(volume_interp(fill_height_in))
        st.subheader("ðŸ“Š Results")
        st.write(f"**Volume in Gallons:** {volume:,.2f} gal")
        st.write(f"**Volume in Liters:** {volume * 3.78541:,.2f} L")

    elif mode == "Volume (gallons)":
        max_volume = volume_gal[-1]
        target_volume = st.number_input("Enter target volume (gallons):", min_value=0.0, max_value=max_volume, step=1.0)
        height_in_result = float(height_interp(target_volume))
        st.subheader("ðŸ“Š Results")
        st.write(f"**Required Height:** {height_in_result * 2.54:.2f} cm")

    elif mode == "Volume (liters)":
        max_liters = volume_gal[-1] * 3.78541
        target_liters = st.number_input("Enter target volume (liters):", min_value=0.0, max_value=max_liters, step=1.0)
        target_volume_gal = target_liters / 3.78541
        height_in_result = float(height_interp(target_volume_gal))
        st.subheader("ðŸ“Š Results")
        st.write(f"**Required Height:** {height_in_result * 2.54:.2f} cm")

st.markdown("---")
st.caption("Volume model based on SKSX117122 empirical chart data.")
