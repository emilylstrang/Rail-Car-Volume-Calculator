import streamlit as st
import numpy as np
from scipy.interpolate import interp1d

st.set_page_config(page_title="Railcar Volume Calculator", layout="centered")

st.title("🚂 Railcar Volume Calculator")
st.markdown(
    "Enter a fill height (cm) or target volume (gallons or liters) "
    "to get the corresponding volume or height based on the empirical tank chart."
)

# Full data points extracted from your chart:
height_in = np.array([
    0.25, 0.50, 0.75, 1.00, 1.25, 1.50, 1.75, 2.00, 2.25, 2.50,
    2.75, 3.00, 3.25, 3.50, 3.75, 4.00, 4.25, 4.50, 4.75, 5.00,
    5.25, 5.50, 5.75, 6.00, 6.25, 6.50, 6.75, 7.00, 7.25, 7.50,
    7.75, 8.00, 8.25, 8.50, 8.75, 9.00, 9.25, 9.50, 9.75, 10.00,
    10.25, 10.50, 10.75, 11.00, 11.25, 11.50, 11.75, 12.00, 12.25, 12.50,
    12.75, 13.00, 13.25, 13.50, 13.75, 14.00, 14.25, 14.50, 14.75, 15.00,
    15.25, 15.50, 15.75, 16.00, 16.25, 16.50, 16.75, 17.00, 17.25, 17.50,
    17.75, 18.00, 18.25, 18.50, 18.75, 19.00, 19.25, 19.50, 19.75, 20.00,
    20.25, 20.50, 20.75, 21.00, 21.25, 21.50, 21.75, 22.00, 22.25, 22.50,
    22.75, 23.00, 23.25, 23.50, 23.75, 24.00, 24.25, 24.50, 24.75, 25.00,
    25.25, 25.50, 25.75, 26.00, 26.25, 26.50, 26.75, 27.00, 27.25, 27.50,
    27.75, 28.00, 28.25, 28.50, 28.75, 29.00, 29.25, 29.50, 29.75, 30.00,
    30.25, 30.50, 30.75, 31.00, 31.25, 31.50, 31.75, 32.00, 32.25, 32.50,
    32.75, 33.00, 33.25, 33.50, 33.75, 34.00, 34.25, 34.50, 34.75, 35.00,
    35.25, 35.50, 35.75, 36.00, 36.25, 36.50, 36.75, 37.00, 37.25, 37.50,
    37.75, 38.00, 38.25, 38.50, 38.75, 39.00, 39.25, 39.50, 39.75, 40.00,
    40.25, 40.50, 40.75, 41.00, 41.25, 41.50, 41.75, 42.00, 42.25, 42.50,
    42.75, 43.00, 43.25, 43.50, 43.75, 44.00, 44.25, 44.50, 44.75, 45.00,
    45.25, 45.50, 45.75, 46.00, 46.25, 46.50, 46.75, 47.00, 47.25, 47.50,
    47.75, 48.00, 48.25, 48.50, 48.75, 49.00, 49.25, 49.50, 49.75, 50.00,
    50.25, 50.50, 50.75, 51.00, 51.25, 51.50, 51.75, 52.00, 52.25, 52.50,
    52.75, 53.00, 53.25, 53.50, 53.75, 54.00, 54.25, 54.50, 54.75, 55.00,
    55.25, 55.50, 55.75, 56.00, 56.25, 56.50, 56.75, 57.00, 57.25, 57.50,
    57.75, 58.00, 58.25, 58.50, 58.75, 59.00, 59.25, 59.50, 59.75, 60.00,
    60.25, 60.50, 60.75, 61.00, 61.25, 61.50, 61.75, 62.00, 62.25, 62.50,
    62.75, 63.00, 63.25, 63.50, 63.75, 64.00, 64.25, 64.50, 64.75, 65.00,
    65.25, 65.50, 65.75, 66.00, 66.25, 66.50, 66.75, 67.00, 67.25, 67.50,
    67.75, 68.00, 68.25, 68.50, 68.75, 69.00, 69.25, 69.50, 69.75, 70.00,
    70.25, 70.50, 70.75, 71.00, 71.25, 71.50, 71.75, 72.00, 72.25, 72.50,
    72.75, 73.00, 73.25, 73.50, 73.75, 74.00, 74.25, 74.50, 74.75, 75.00,
    75.25, 75.50, 75.75, 76.00, 76.25, 76.50, 76.75, 77.00, 77.25, 77.50,
    77.75, 78.00, 78.25, 78.50, 78.75, 79.00, 79.25, 79.50, 79.75, 80.00,
    80.25, 80.50, 80.75, 81.00, 81.25, 81.50, 81.75, 82.00, 82.25, 82.50,
    82.75, 83.00, 83.25, 83.50, 83.75, 84.00, 84.25, 84.50, 84.75, 85.00,
    85.25, 85.50, 85.75, 86.00, 86.25, 86.50, 86.75, 87.00, 87.25, 87.50,
    87.75, 88.00, 88.25, 88.50, 88.75, 89.00, 89.25, 89.50, 89.75, 90.00,
    90.25, 90.50, 90.75, 91.00, 91.25, 91.50, 91.75, 92.00, 92.25, 92.50,
    92.75, 93.00, 93.25, 93.50, 93.75, 94.00, 94.25, 94.50, 94.75, 95.00,
    95.25, 95.50, 95.75, 96.00, 96.25, 96.50, 96.75, 97.00, 97.25, 97.50,
    97.75, 98.00, 98.25, 98.50, 98.75, 99.00, 99.25, 99.50, 99.75, 100.00,
    100.25, 100.50, 100.75, 101.00, 101.25, 101.50, 101.75, 102.00, 102.25,
    102.50, 102.75, 103.00, 103.25, 103.50, 103.75, 104.00, 104.25, 104.50,
    104.75, 105.00, 105.25, 105.50, 105.75, 106.00, 106.25, 106.50, 106.75,
    107.00, 107.25, 107.50, 107.75, 108.00, 108.25, 108.50, 108.75, 109.00,
    109.25, 109.50, 109.75, 110.00, 110.25, 110.50, 110.75, 111.00, 111.25,
    111.50, 111.75, 112.00, 112.25, 112.50, 112.75, 113.00, 113.25, 113.50,
    113.75, 114.00, 114.25, 114.50, 114.75, 115.00, 115.25, 115.50, 115.75,
    116.00, 116.25, 116.50
])

volume_gal = np.array([
    23, 47, 72, 98, 125, 153, 182, 212, 242, 274,
    306, 339, 373, 408, 443, 479, 516, 553, 591, 629,
    669, 709, 749, 790, 832, 874, 916, 960, 1004, 1048,
    1093, 1138, 1184, 1230, 1277, 1325, 1373, 1421, 1470, 1519,
    1568, 1619, 1669, 1720, 1772, 1823, 1876, 1928, 1981, 2035,
    2089, 2143, 2198, 2253, 2308, 2364, 2420, 2476, 2533, 2591,
    2648, 2706, 2764, 2823, 2882, 2941, 3001, 3061, 3121, 3181,
    3242, 3303, 3365, 3427, 3489, 3551, 3614, 3677, 3740, 3804,
    3867, 3931, 3996, 4060, 4125, 4191, 4256, 4322, 4388, 4454,
    4520, 4587, 4654, 4721, 4789, 4856, 4924, 4992, 5061, 5129,
    5198, 5267, 5337, 5406, 5476, 5546, 5616, 5686, 5757, 5828,
    5899, 5970, 6041, 6113, 6185, 6256, 6329, 6401, 6473, 6546,
    6619, 6692, 6757, 6835, 6911, 6983, 7056, 7130, 7208, 7287,
    7360, 7437, 7516, 7595, 7677, 7758, 7840, 7922, 8005, 8089,
    8173, 8258, 8344, 8431, 8518, 8606, 8695, 8784, 8874, 8965,
    9056, 9148, 9241, 9334, 9428, 9522, 9616, 9711, 9807, 9903,
    9999, 10096, 10194, 10292, 10391, 10490, 10590, 10690, 10791, 10892,
    10994, 11096, 11198, 11301, 11404, 11507, 11611, 11715, 11819, 11924,
    12029, 12134, 12240, 12346, 12452, 12558, 12665, 12772, 12879, 12987,
    13095, 13203, 13311, 13420, 13529, 13638, 13748, 13858, 13968, 14078,
    14188, 14299, 14410, 14521, 14632, 14743, 14854, 14966, 15078, 15190,
    15302, 15414, 15527, 15640, 15753, 15866, 15979, 16092, 16205, 16319,
    16433, 16547, 16661, 16775, 16889, 17004, 17119, 17234, 17349, 17464,
    17579, 17694, 17809, 17924, 18040, 18156, 18272, 18388, 18504, 18620,
    18736, 18852, 18968, 19084, 19200, 19316, 19432, 19548, 19664, 19780,
    19896, 20012, 20128, 20244, 20360, 20476, 20592, 20708, 20824, 20940,
    21056, 21172, 21288, 21404, 21520, 21636, 21752, 21868, 21984, 22100,
    22216, 22332, 22448, 22564, 22680, 22796, 22912, 23028, 23144, 23260,
    23376, 23492, 23608, 23724, 23840, 23956, 24072, 24188, 24304, 24420,
    24536, 24652, 24768, 24884, 25000, 25116, 25232, 25348, 25464, 25580,
    25696, 25812, 25928, 26044, 26160, 26276, 26392, 26508, 26624, 26740,
    26856, 26972, 27088, 27204, 27320, 27436, 27552, 27668, 27784, 27900,
    28016, 28132, 28248, 28364, 28480, 28596, 28712, 28828, 28944, 29060,
    29176, 29292, 29408, 29524, 29640, 29756, 29872, 29988, 30104, 30220,
    30336, 30452, 30568, 30684, 30800, 30916, 31032, 31148, 31264, 31380,
    31496, 31612, 31728, 31844, 31960, 32076, 32192, 32308, 32424, 32540,
    32656, 32772, 32888, 33004, 33120, 33236, 33352, 33468, 33584, 33700,
    33816, 33932, 34048, 34164, 34280, 34396, 34512, 34628, 34744, 34860,
    34976, 35092, 35208, 35324, 35440, 35556, 35672, 35788, 35904, 36020,
    36136, 36252, 36368, 36484, 36600, 36716, 36832, 36948, 37064, 37180,
    37296, 37412, 37528, 37644, 37760, 37876, 37992, 38108, 38224, 38340,
    38456, 38572, 38688, 38804, 38920, 39036, 39152, 39268, 39384, 39500,
    39616, 39732, 39848, 39964, 40080, 40196, 40312, 40428, 40544, 40660,
    40776, 40892, 41008, 41124, 41240, 41356, 41472, 41588, 41704, 41820,
    41936, 42052, 42168, 42284, 42400, 42516, 42632, 42748, 42864, 42980,
    43096, 43212, 43328, 43444, 43560, 43676, 43792, 43908, 44024, 44140,
    44256, 44372, 44488, 44604, 44720, 44836, 44952, 45068, 45184, 45300,
    45416, 45532, 45648, 45764, 45880, 45996, 46112, 46228, 46344, 46460,
    46576, 46692, 46808, 46924, 47040, 47156, 47272, 47388, 47504, 47620,
    47736, 47852, 47968, 48084, 48200, 48316, 48432, 48548, 48664, 48780,
    48896, 49012, 49128, 49244, 49360, 49476, 49592, 49708, 49824, 49940,
    50056, 50172, 50288, 50404, 50520, 50636, 50752, 50868, 50984, 51100,
    51216, 51332, 51448, 51564, 51680, 51796, 51912, 52028, 52144, 52260,
    52376, 52492, 52608, 52724, 52840, 52956, 53072, 53188, 53304, 53420,
    53536, 53652, 53768, 53884, 54000, 54116, 54232, 54348, 54464, 54580,
    54696, 54812, 54928, 55044, 55160, 55276, 55392, 55508, 55624, 55740,
    55856, 55972, 56088, 56204, 56320, 56436, 56552, 56668, 56784, 56900,
    57016, 57132, 57248, 57364, 57480, 57596, 57712, 57828, 57944, 58060,
    58176, 58292, 58408, 58524, 58640, 58756, 58872, 58988, 59104, 59220,
    59336, 59452, 59568, 59684, 59800, 59916, 60032, 60148, 60264, 60380,
    60496, 60612, 60728, 60844, 60960, 61076, 61192, 61308, 61424, 61540,
    61656, 61772, 61888, 62004, 62120, 62236, 62352, 62468, 62584, 62700,
    62816, 62932, 63048, 63164, 63280, 63396, 63512, 63628, 63744, 63860,
    63976, 64092, 64208, 64324, 64440, 64556, 64672, 64788, 64904, 65020,
    65136, 65252, 65368, 65484, 65600, 65716, 65832, 65948, 66064, 66180,
    66296, 66412, 66528, 66644, 66760, 66876, 66992, 67108, 67224, 67340,
    67456, 67572, 67688, 67804, 67920, 68036, 68152, 68268, 68384, 68500,
    68616, 68732, 68848, 68964, 69080, 69196, 69312, 69428, 69544, 69660,
    69776, 69892, 70008, 70124, 70240, 70356, 70472, 70588, 70704, 70820,
    70936, 71052, 71168, 71284, 71400, 71516, 71632, 71748, 71864, 71980,
    72096, 72212, 72328, 72444, 72560, 72676, 72792, 72908, 73024, 73140,
    73256, 73372, 73488, 73604, 73720, 73836, 73952, 74068, 74184, 74300,
    74416, 74532, 74648, 74764, 74880, 74996, 75112, 75228, 75344, 75460,
    75576, 75692, 75808, 75924, 76040, 76156, 76272, 76388, 76504, 76620,
    76736, 76852, 76968, 77084, 77200, 77316, 77432, 77548, 77664, 77780,
    77896, 78012, 78128, 78244, 78360, 78476, 78592, 78708, 78824, 78940,
    79056, 79172, 79288, 79404, 79520, 79636, 79752, 79868, 79984, 80100,
    80216, 80332, 80448, 80564, 80680, 80796, 80912, 81028, 81144, 81260,
    81376, 81492, 81608, 81724, 81840, 81956, 82072, 82188, 82304, 82420,
    82536, 82652, 82768, 82884, 83000, 83116, 83232, 83348, 83464, 83580,
    83696, 83812, 83928, 84044, 84160, 84276, 84392, 84508, 84624, 84740,
    84856, 84972, 85088, 85204, 85320, 85436, 85552, 85668, 85784, 85900,
    86016, 86132, 86248, 86364, 86480, 86596, 86712, 86828, 86944, 87060,
    87176, 87292, 87408, 87524, 87640, 87756, 87872, 87988, 88104, 88220,
    88336, 88452, 88568, 88684, 88800, 88916, 89032, 89148, 89264, 89380,
    89496, 89612, 89728, 89844, 89960, 90076, 90192, 90308, 90424, 90540,
    90656, 90772, 90888, 91004, 91120, 91236, 91352, 91468, 91584, 91700,
    91816, 91932, 92048, 92164, 92280, 92396, 92512, 92628, 92744, 92860,
    92976, 93092, 93208, 93324, 93440, 93556, 93672, 93788, 93904, 94020,
    94136, 94252, 94368, 94484, 94600, 94716, 94832, 94948, 95064, 95180,
    95296, 95412, 95528, 95644, 95760, 95876, 95992, 96108, 96224, 96340,
    96456, 96572, 96688, 96804, 96920, 97036, 97152, 97268, 97384, 97500,
    97616, 97732, 97848, 97964, 98080, 98196, 98312, 98428, 98544, 98660,
    98776, 98892, 99008, 99124, 99240, 99356, 99472, 99588, 99704, 99820,
    99936, 100052, 100168, 100284, 100400, 100516, 100632, 100748, 100864, 100980,
    101096, 101212, 101328, 101444, 101560, 101676, 101792, 101908, 102024, 102140,
    102256, 102372, 102488, 102604, 102720, 102836, 102952, 103068, 103184, 103300,
    103416, 103532, 103648, 103764, 103880, 103996, 104112, 104228, 104344, 104460,
    104576, 104692, 104808, 104924, 105040, 105156, 105272, 105388, 105504, 105620,
    105736, 105852, 105968, 106084, 106200, 106316, 106432, 106548, 106664, 106780,
    106896, 107012, 107128, 107244, 107360, 107476, 107592, 107708, 107824, 107940,
    108056, 108172, 108288, 108404, 108520, 108636, 108752, 108868, 108984, 109100,
    109216, 109332, 109448, 109564, 109680, 109796, 109912, 110028, 110144, 110260,
    110376, 110492, 110608, 110724, 110840, 110956, 111072, 111188, 111304, 111420,
    111536, 111652, 111768, 111884, 112000, 112116, 112232, 112348, 112464, 112580,
    112696, 112812, 112928, 113044, 113160, 113276, 113392, 113508, 113624, 113740,
    113856, 113972, 114088, 114204, 114320, 114436, 114552, 114668, 114784, 114900,
    115016, 115132, 115248, 115364, 115480, 115596, 115712, 115828, 115944, 116060,
    116176, 116292, 116408, 116524, 116640
])
st.write(f"⚙️ Max height in chart (inches): {height_in[-1]}")
st.write(f"⚙️ Max height in chart (cm): {height_in[-1] * 2.54:.2f}")

# Convert user input from cm to inches
def cm_to_inches(cm):
    return cm / 2.54

def inches_to_cm(inches):
    return inches * 2.54

def gallons_to_liters(gal):
    return gal * 3.78541

def liters_to_gallons(liters):
    return liters / 3.78541
    
st.write(f"⚠️ Length of height_in: {len(height_in)}")
st.write(f"⚠️ Length of volume_gal: {len(volume_gal)}")

# Create interpolation functions
volume_interp = interp1d(height_in, volume_gal, kind='linear', fill_value="extrapolate")
height_interp = interp1d(volume_gal, height_in, kind='linear', fill_value="extrapolate")

# User input method
mode = st.radio("Select input type:", ["Fill height (cm)", "Volume (gallons)", "Volume (liters)"])

if mode == "Fill height (cm)":
    fill_height_cm = st.number_input("Enter fill height (cm):", min_value=0.0, max_value=float(height_in[-1] * 2.54), step=0.01)
    fill_height_in = cm_to_inches(fill_height_cm)
    gallons = float(volume_interp(fill_height_in))
    liters = gallons_to_liters(gallons)
    st.write(f"Estimated volume: **{gallons:.2f} gallons** ({liters:.2f} liters)")

elif mode == "Volume (gallons)":
    gallons_input = st.number_input("Enter volume (gallons):", min_value=0.0, max_value=float(volume_gal[-1]), step=0.01)
    fill_height_in = float(height_interp(gallons_input))
    fill_height_cm = inches_to_cm(fill_height_in)
    liters = gallons_to_liters(gallons_input)
    st.write(f"Estimated fill height: **{fill_height_cm:.2f} cm** ({fill_height_in:.2f} inches)")
    st.write(f"Volume in liters: **{liters:.2f} liters**")

else:  # Volume in liters
    liters_input = st.number_input("Enter volume (liters):", min_value=0.0, max_value=gallons_to_liters(volume_gal[-1]), step=0.01)
    gallons_input = liters_to_gallons(liters_input)
    fill_height_in = float(height_interp(gallons_input))
    fill_height_cm = inches_to_cm(fill_height_in)
    st.write(f"Estimated fill height: **{fill_height_cm:.2f} cm** ({fill_height_in:.2f} inches)")
    st.write(f"Volume in gallons: **{gallons_input:.2f} gallons**")
